apply from: "${project.rootDir}/gradle/version/version.gradle"
apply from: "${project.rootDir}/metadata.gradle"
apply from: "${project.rootDir}/gradle/dependencies.gradle"

apply plugin: 'com.github.ben-manes.versions'

buildscript {
  apply from: "${rootDir.absolutePath}/ext.gradle"

  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.2'

    classpath 'com.github.ben-manes:gradle-versions-plugin:0.36.0'
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5"
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.15.2"
  }
}

def generatePomFilesTask = tasks.create("generatePomFiles")

allprojects {
  repositories {
    google()
    jcenter()
  }

  tasks.whenTaskAdded {
    if (it.name.matches("generatePomFileFor([A-Z][a-zA-Z]*)Publication")) {
      generatePomFilesTask.dependsOn it
    }
  }
}

ext {
  metadata.version = ext.versionName()
}

String shell(String command) {
  def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
  if (proc.waitFor() != 0) {
    throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
  } else {
    def err = proc.err.text
    if (err) {
      System.err.println(err)
    }
  }
  return proc.in.text
}

task releng {
  doLast {
    def tag = "v" + versionName()
    println "Release engineering for ${tag}"

    def changes = shell "git status -s"
    if (changes.trim()) {
      throw new RuntimeException("There are changes not commited yet.\n${changes}")
    }

    println "> git tag ${tag}"
    shell "git tag ${tag}"
    println "> git push origin ${tag}"
    shell "git push origin ${tag}"
    shell "git push origin master"
  }
}

// # release commands:
// ./gradlew clean build generatePomFileForReleasePublication
// ./gradlew bintrayUpload

wrapper {
  gradleVersion = '6.8.2'
  //noinspection UnnecessaryQualifiedReference
  distributionType = Wrapper.DistributionType.ALL
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
