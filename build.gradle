apply from: "${project.rootDir}/gradle/version/version.gradle"
apply from: "${project.rootDir}/metadata.gradle"

apply plugin: 'com.github.ben-manes.versions'

buildscript {
  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.4'

    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    classpath 'com.novoda:bintray-release:0.8.1' // https://github.com/novoda/bintray-release
  }
}

allprojects {
  repositories {
    google()
    jcenter()
  }
}

ext {
  supportlib_version = '27.1.1'
  architecture_version = '1.1.1'
  metadata.version = ext.versionName()
}

String shell(String command) {
  def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
  if (proc.waitFor() != 0) {
    throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
  } else {
    def err = proc.err.text
    if (err) {
      System.err.println(err)
    }
  }
  return proc.in.text
}

task releng {
  doLast {
    def tag = "v" + versionName()
    println "Release engineering for ${tag}"

    def changes = shell "git status -s"
    if (changes.trim()) {
      throw new RuntimeException("There are changes not commited yet.\n${changes}")
    }

    println "> git tag ${tag}"
    shell "git tag ${tag}"
    println "> git push origin ${tag}"
    shell "git push origin ${tag}"
    shell "git push origin master"
  }
}

// # release commands:
// ./gradlew clean build releaseAndroidJavadocs releaseAndroidJavadocJar releaseAndroidSourceJar generatePomFileForReleasePublication
// ./gradlew bintrayUpload

task wrapper(type: Wrapper) {
  gradleVersion = "4.4.1"
  distributionType "ALL"
}
