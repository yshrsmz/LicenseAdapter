apply plugin: 'com.android.library'
apply plugin: "com.vanniktech.maven.publish"

android {
  compileSdkVersion 30

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 30

    vectorDrawables.useSupportLibrary = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    buildConfig = false
  }
}

dependencies {
  api deps.recyclerview

  implementation deps.appcompat
  implementation deps.browser
  implementation deps.constraint
  implementation deps.lifecycle
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
  source += android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set('javadoc')
  from javadoc.destinationDir
}

javadoc {
  options.charSet = 'UTF-8'
  options.encoding = 'UTF-8'
  options.locale = 'en_US'
}

def getGpgKey() {
  return hasProperty("signingKey") ? signingKey : ""
}

def getGpgPassword() {
  return hasProperty("signingKeyPassword") ? signingKeyPassword : ""
}

mavenPublish {
  releaseSigningEnabled = !getGpgKey().isEmpty() && !getGpgPassword().isEmpty()
  targets {
    testMaven {
      releaseRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
      snapshotRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
    }
  }
}

signing {
  def signingKey = getGpgKey()
  def password = getGpgPassword()
  if (!signingKey.isEmpty() && !password.isEmpty()) {
    useInMemoryPgpKeys(signingKey, password)
  }
}
